/******/ (function() { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var canvas = document.getElementById("canvas");
var ctx = canvas.getContext('2d');
canvas.width = 800;
canvas.height = 500;
var score = 0;
var gameFrame = 0;
ctx.font = "30px Bungee Shade";
var canvasPos = canvas.getBoundingClientRect();
console.log(canvasPos);
var keys = {
  leftPressed: false,
  rightPressed: false
};
document.addEventListener('keydown', function (e) {
  switch (e.keyCode) {
    case 37:
      keys.leftPressed = true;
      break;

    case 39:
      keys.rightPressed = true;
      break;
  }
});
document.addEventListener('keyup', function (e) {
  switch (e.keyCode) {
    case 37:
      keys.leftPressed = false;
      break;

    case 39:
      keys.rightPressed = false;
      break;
  }
});
canvas.addEventListener('mouseup', function (event) {
  console.log(event.x - canvasPos.left, event.y - canvasPos.top);
}); //food

var tomato = new Image();
tomato.src = './dist/images/tomato.png';
var lettuce = new Image();
lettuce.src = './dist/images/lettuce.png';
var bread = new Image();
bread.src = './dist/images/bread.png';
var bacon = new Image();
bacon.src = './dist/images/bacon.png';
var mayo = new Image();
mayo.src = './dist/images/mayo.png';
var mayoflat = new Image();
mayoflat.src = './dist/images/mayoflat.png';
var ingredients = [tomato, mayo, lettuce, bacon, tomato, mayo, lettuce, bacon, bread];
var foodArr = [];

var Food = /*#__PURE__*/function () {
  function Food() {
    _classCallCheck(this, Food);

    this.x = Math.random() * canvas.width;
    this.y = -100;
    this.radius = 50;
    this.counted = false;
    this.ingredient = ingredients[Math.floor(Math.random() * ingredients.length)]; // this.stackx = this.x;
    // this.stacky = canvas.height - 100;

    if (this.x > 700) this.x -= 100; // if (this.x < 100) this.x += 100;
  }

  _createClass(Food, [{
    key: "update",
    value: function update() {
      var dy = canvas.height + 100;
      if (dy != this.y) this.y += 5;
    }
  }, {
    key: "draw",
    value: function draw() {
      if (this.ingredient.currentSrc.includes("bread")) {
        ctx.drawImage(this.ingredient, 0, 0, 1000, 1000, this.x, this.y, 300, 300);
      } else {
        ctx.drawImage(this.ingredient, 0, 0, 1000, 1000, this.x, this.y, 250, 250);
      }
    }
  }]);

  return Food;
}();

var Bread = /*#__PURE__*/function () {
  function Bread() {
    _classCallCheck(this, Bread);

    this.y = canvas.height - 100;
    this.x = canvas.width / 2;
  }

  _createClass(Bread, [{
    key: "update",
    value: function update() {
      if (keys.leftPressed && this.x !== 0) this.x -= 5;
      if (keys.rightPressed && this.x !== canvas.width - 130) this.x += 5;
    }
  }, {
    key: "draw",
    value: function draw(contacted) {
      var stackx = this.x;
      var stacky = canvas.height - 100;
      ctx.drawImage(bread, 0, 0, 1000, 1000, this.x, canvas.height - 100, 300, 300);

      if (contacted) {
        for (var i = 0; i < contacted.length; i++) {
          if (contacted[i].ingredient) {
            if (contacted[i].ingredient.currentSrc.includes("bread")) {
              ctx.drawImage(contacted[i].ingredient, 0, 0, 1000, 1000, stackx, stacky, 300, 300);
            } else {
              ctx.drawImage(contacted[i].ingredient, 0, 0, 1000, 1000, stackx, stacky, 250, 250);
            }
          } else {
            ctx.drawImage(contacted[i], 0, 0, 1000, 1000, stackx, stacky, 250, 250);
          }

          stacky = stacky - 20;
          if (stacky < 40) yeet();
        }
      }
    }
  }]);

  return Bread;
}();

function gameOver() {}

var thisbread = new Bread();
var contacted = [];

function handleFood() {
  if (gameFrame % 200 == 0) {
    var newFood = new Food();
    foodArr.push(newFood);
  }

  for (var i = 0; i < foodArr.length; i++) {
    if (foodArr[i].y === thisbread.y && foodArr[i].x > thisbread.x - 50 && foodArr[i].x < thisbread.x + 50) {
      if (!foodArr[i].counted) score += 1;

      if (contacted.indexOf(foodArr[i]) === -1) {
        if (foodArr[i].ingredient.currentSrc.includes("mayo")) {
          contacted.push(mayoflat);
          foodArr[i].counted = true;
          foodArr.shift(foodArr[i]);
        } else {
          foodArr[i].counted = true;
          contacted.push(foodArr[i]);
        }

        thisbread.y -= 20;
      }

      break;
    }

    thisbread.draw(contacted);
    foodArr[i].update();
    if (contacted.indexOf(foodArr[i]) === -1 && foodArr[i].y < canvas.height) foodArr[i].draw();
    if (foodArr[i].y > canvas.height) foodArr.shift(foodArr[i]);
  }
} //animation 


function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  thisbread.draw(contacted);
  thisbread.update();
  handleFood();
  gameFrame++;
  ctx.fillStyle = "white";
  ctx.fillText("score: " + score, 10, 30);
  requestAnimationFrame(animate);
}

animate();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,